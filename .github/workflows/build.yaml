name: Build and Push Docker Image

on:
  push:
    branches:
      - main
env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: vanlahuynhduc/exchange-ws

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from package.json
        id: extract_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get short SHA
        id: vars
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build the Docker image
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          GITHUB_SHA_SHORT: ${{ env.GITHUB_SHA_SHORT }}
        run: |
          docker build . -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$VERSION-$GITHUB_SHA_SHORT

      - name: Push the Docker image
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          GITHUB_SHA_SHORT: ${{ env.GITHUB_SHA_SHORT }}
        run: |
          docker push $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$VERSION-$GITHUB_SHA_SHORT

      - name: Update chart values
        run: |
          sed -i "s|name:.*|name: $DOCKER_IMAGE_NAME|" values.yaml
          sed -i "s|tag:.*|tag: $VERSION-$GITHUB_SHA_SHORT|" values.yaml

      - name: Commit and push changes to dev branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout dev
          git add values.yaml
          git commit -m "Update chart values with new image tag"
          git push origin dev

      - name: Create a tag to trigger ArgoCD
        run: |
          git tag $DOCKER_IMAGE_NAME:$VERSION-$GITHUB_SHA_SHORT
          git push origin $DOCKER_IMAGE_NAME:$VERSION-$GITHUB_SHA_SHORT