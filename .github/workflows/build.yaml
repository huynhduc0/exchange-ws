name: Build and Push Docker Image

on:
  push:
    branches:
      - dev
env:
  DOCKER_SERVER: docker.io
  DOCKER_REGISTRY: vanlahuynhduc
  DOCKER_IMAGE_NAME: exchange-ws

permissions:
  contents: write

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  extract-version:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}
      GITHUB_SHA_SHORT: ${{ steps.vars.outputs.GITHUB_SHA_SHORT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract version from package.json
        id: extract_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"
          
      - name: Get short SHA
        id: vars
        run: |
          GITHUB_SHA_SHORT=${GITHUB_SHA::8}
          echo "GITHUB_SHA_SHORT=$GITHUB_SHA_SHORT" >> $GITHUB_ENV
          echo "::set-output name=GITHUB_SHA_SHORT::$GITHUB_SHA_SHORT"

  build-and-push:
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
      - name: Build and push the Docker image
        env:
          DOCKER_SERVER: ${{ env.DOCKER_SERVER }}
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          VERSION: ${{ needs.extract-version.outputs.VERSION }}
          GITHUB_SHA_SHORT: ${{ needs.extract-version.outputs.GITHUB_SHA_SHORT }}
        run: |
          docker buildx build --platform linux/arm/v7 -t $DOCKER_SERVER/$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$VERSION-$GITHUB_SHA_SHORT --push .

  update-chart:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Update chart values
        run: |
          sed -i "s|stable:.*|stable: $(grep 'canary:' charts/exchange-ws/values.yaml | awk '{print $2}')|" charts/exchange-ws/values.yaml
          sed -i "s|canary:.*|canary: $VERSION-$GITHUB_SHA_SHORT|" charts/exchange-ws/values.yaml

      - name: Commit and push changes to dev branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add charts/exchange-ws/values.yaml
          git commit -m "Update chart values with new image tag"
          git pull --rebase
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git dev

  create-tag:
    runs-on: ubuntu-latest
    needs: update-chart
    steps:
      - name: Create a tag to trigger ArgoCD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag $DOCKER_IMAGE_NAME-$VERSION-$GITHUB_SHA_SHORT
          git pull --rebase
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $DOCKER_IMAGE_NAME-$VERSION-$GITHUB_SHA_SHORT